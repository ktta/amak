#
# This is the configuration file for amak.
#
# Uncomment and set the values below. 
#
[project]
# name=com.dodo.android_test
# android_version= 26
# apkfile= AndroidTest.apk
#
# The following name will be put into the AndroidManifest.xml. It will
# be used to display the icon.
#
# display_name=Android Test
#
# orientation=landscape
# 
# The permissions required for the application. The identifiers used
# are the same ones that appear in AndroidManifest.xml 
#
# permissions= WRITE_EXTERNAL_STORAGE INTERNET ACCESS_NETWORK_STATE
# permissions+= ACCESS_WIFI_STATE 
#
[apksigner]
#
# Every apk needs to be signed. You'll need a keystore for this.
# The program generates a debug keystore for you with a default password.
# Set the below variables to use your own key and password.
#
# keystore=pakobj/debug.keystore
# storepass=android
#
# you may specify the command line for the tool here. the default
# is shown below
# flags= sign -ks %keystore% -ks-pass pass:%storepass% 
# flags+= --out pakobj/%apkfile% pakobj/unsigned.apk
#

[paths]
#
# Path to Android Sdk
#
# sdk= /home/dodo/Android/Sdk
#
# Some tools from the SDK are used to compile and link various objects.
# These are:
#
# aapt2      compiles and links resources, creating the initial APK
# d8         links Java objects to create a DEX file, which is like
#            an executable for Android
# zipalign   aligns objects within ZIP files to facilitate mmap()
#            usage at runtime
# apksigner  signs an APK file with your credentials 
#
# A couple of other tools are also used which are commonly found in Linux
# systems.
#
# Build tools are normally found automatically from the SDK distribution.
# However, if your SDK distribution's packaging differs from the one
# implemented in the program, you may set the paths to the tools manually.
#
# Each tool is described in it's own INI section. The 'path' variable
# in these sections specify the path to the tool. For instance:
#
# [aapt2]
#
# path=/path/to/aapt2
#
# Alternatively, you may set the build tool directory for all the tools.
# 
# build_tool_dir=%sdk%/build-tools/%build_tool_ver%
#
# If you want the automatic selection of the tool version, but the
# tools live somewhere other than %sdk%/build-tools, you may set the
# search variable to let the program do its thing.
#
# build_tool_search=%sdk/build-tools
#
# If the search directory (default or manual) is set up correctly,
# you may choose a particular version of the tools by setting the
# version variable:
#
# build_tool_ver=33.0.1
#
# All in all, setting 'sdk', 'studio/javac' and 'android_version'
# should work by default.
#

[java]
#
# The default javac installed on the system doesn't work. I use the
# one from Android Studio. If you are in the same situation, set this
# path.
#
# studio= /home/dodo/android-studio
#
# when given the 'studio' variable, the default path for javac is as
# follows:
#
# javac= %studio%/jre/bin/javac
#
# Alternatively, you may set the path to a known good javac here.
#
# javac=/path/to/javac
#
# If you want to use a version of java other than 1.6, you may set it
# here
#
# version=1.6
#
# The whole javac command line arguments are here:
#
# cflags= -source %java_version% -target %java_version% -d java-obj
# cflags+= -bootclasspath %android_version%
#
# The -d java-obj part is crucial.
#
# The android.jar file is normally found automatically within the 
# SDK directory. However, you may set its path here if it's somewhere
# else. Here is the default value
#
# android_jar= %sdk%/platforms/android-%android_version%/android.jar
#

[native]
#
# The program is also able to compile native C/C++ code.
#
# You need to specify here for which targets you want your native
# code compiled.
#
# targets= aarch64 armv7a x86_64 x86
#
# When doing a release build, the targets should be listed in the
# following variable:
#
# release_targets= aarch64 armv7a x86_64 x86
#
# basically, you use 'targets' for development builds to test things
# out on a particular architecture, and then you build for 'release_targets'
# to make a release build which will include all necessary platforms.
#
# The C/C++ compilers are normally automatically found from the SDK
# directory. However, this might fail if the layout of the SDK 
# distribution is different than the one used in the program. You
# may set the compilers in this section. The same binary will be used
# for all architectures. However, a target specification in the 
# compiler flags will allow the compiler to choose the right architecture.
#
# cc=/path/to/clang
# cxx=/path/to/clang++
#
# If you have different binaries for each architecture, then you may
# set them in the relevant section. 
#
# [x86_64]
# cc=/path/to/clang-for-x86_64
# cxx=/path/to/clang++for-x86_64
# spec=x86_64-linux-android%android_version%
# [x86]
# spec=i686-linux-android%android_version%
# [aarch64]
# spec=aarch64-linux-android%android_version%
# [armv7a]
# spec=armv7a-linux-androideabi%android_version%
#
# In each architecture section, we have a target specification. This is
# given as an argument to the compiler flag -target. 
